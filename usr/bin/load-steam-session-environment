#!/bin/bash

config_dir=${XDG_CONFIG_HOME:-$HOME/.config}
gamescope_config="$config_dir/gamescope"
mkdir -p "$gamescope_config"

# even though gamescope itself runs on wayland,
# apps under gamescope should use XWayland
systemctl --user set-environment XDG_SESSION_TYPE=x11

# don't create a desktop portal to avoid issues with some apps
systemctl --user set-environment XDG_DESKTOP_PORTAL_DIR=''

# steam deck does this, I don't know why but let's keep it for now.
systemctl --user unset-environment DISPLAY GAMESCOPE_WAYLAND_DISPLAY XAUTHORITY

# Fix intel color corruption
# might come with some performance degradation but is better than a corrupted
# color image
systemctl --user set-environment INTEL_DEBUG=norbc
systemctl --user set-environment mesa_glthread=true

# Show VRR controls in Steam
systemctl --user set-environment STEAM_GAMESCOPE_VRR_SUPPORTED=1

# Some environment variables by default (taken from Deck session)
systemctl --user set-environment SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS=0

SESSION_RUNDIR=${XDG_RUNTIME_DIR:?Missing runtime dir}/steamsession
mkdir -p "$SESSION_RUNDIR"
systemctl --user set-environment SESSION_RUNDIR="$SESSION_RUNDIR"

# Enable Mangoapp
MANGOHUD_CONFIGFILE="$SESSION_RUNDIR/mangohud"
systemctl --user set-environment STEAM_MANGOAPP_PRESETS_SUPPORTED=1
systemctl --user set-environment STEAM_USE_MANGOAPP=1
systemctl --user set-environment MANGOHUD_CONFIGFILE="$MANGOHUD_CONFIGFILE"
echo "no_display" > "$MANGOHUD_CONFIGFILE"

# Prepare our initial VRS config file
# for dynamic VRS in Mesa.
RADV_FORCE_VRS_CONFIG_FILE="$SESSION_RUNDIR/radv_vrs"
echo "1x1" > "$RADV_FORCE_VRS_CONFIG_FILE"
systemctl --user set-environment STEAM_USE_DYNAMIC_VRS=1
systemctl --user set-environment RADV_FORCE_VRS_CONFIG_FILE="$RADV_FORCE_VRS_CONFIG_FILE"

# Plop GAMESCOPE_MODE_SAVE_FILE into $config_dir
GAMESCOPE_MODE_SAVE_FILE="$gamescope_config/modes.cfg"
touch "$GAMESCOPE_MODE_SAVE_FILE"
systemctl --user set-environment GAMESCOPE_MODE_SAVE_FILE="$GAMESCOPE_MODE_SAVE_FILE"

# Make path to Gamescope edid patched file.
GAMESCOPE_PATCHED_EDID_FILE="$gamescope_config/edid.bin"
touch "$GAMESCOPE_PATCHED_EDID_FILE"
systemctl --user set-environment GAMESCOPE_PATCHED_EDID_FILE="$GAMESCOPE_PATCHED_EDID_FILE"

# Set up first time bootstrap status
STEAM_BOOTSTRAP_CONFIG="$gamescope_config/bootstrap.cfg"
touch "$STEAM_BOOTSTRAP_CONFIG"
systemctl --user set-environment STEAM_BOOTSTRAP_CONFIG="$STEAM_BOOTSTRAP_CONFIG"

# Support for gamescope tearing with GAMESCOPE_ALLOW_TEARING atom
systemctl --user set-environment STEAM_GAMESCOPE_HAS_TEARING_SUPPORT=1

# Enable tearing controls in steam
systemctl --user set-environment STEAM_GAMESCOPE_TEARING_SUPPORTED=1

# There is no way to set a color space for an NV12
# buffer in Wayland. And the color management protocol that is
# meant to let this happen is missing the color range...
# So just workaround this with an ENV var that Remote Play Together
# and Gamescope will use for now.
systemctl --user set-environment GAMESCOPE_NV12_COLORSPACE=k_EStreamColorspace_BT601

systemctl --user set-environment STEAM_GAMESCOPE_HDR_SUPPORTED=1

# To expose vram info from radv
systemctl --user set-environment WINEDLLOVERRIDES=dxgi=n

# Enable volume key management via steam for this session
systemctl --user set-environment STEAM_ENABLE_VOLUME_HANDLER=1

# Have SteamRT's xdg-open send http:// and https:// URLs to Steam
systemctl --user set-environment SRT_URLOPEN_PREFER_STEAM=1

# Disable automatic audio device switching in steam, now handled by wireplumber
systemctl --user set-environment STEAM_DISABLE_AUDIO_DEVICE_SWITCHING=1

# Enable support for xwayland isolation per-game in Steam
systemctl --user set-environment STEAM_MULTIPLE_XWAYLANDS=1

# We have the Mesa integration for the fifo-based dynamic fps-limiter
systemctl --user set-environment STEAM_GAMESCOPE_DYNAMIC_FPSLIMITER=1

# We have NIS support
systemctl --user set-environment STEAM_GAMESCOPE_NIS_SUPPORTED=1

# Don't wait for buffers to idle on the client side before sending them to gamescope
systemctl --user set-environment vk_xwayland_wait_ready=false

# Let steam know it cannot unmount drives without superuser privileges
systemctl --user set-environment STEAM_ALLOW_DRIVE_UNMOUNT=0

# We no longer need to set GAMESCOPE_EXTERNAL_OVERLAY from steam, mangoapp now does it itself
systemctl --user set-environment STEAM_DISABLE_MANGOAPP_ATOM_WORKAROUND=1

# Enable horizontal mangoapp bar
systemctl --user set-environment STEAM_MANGOAPP_HORIZONTAL_SUPPORTED=1

# Scaling support
systemctl --user set-environment STEAM_GAMESCOPE_FANCY_SCALING_SUPPORT=1

# Color management support
# systemctl --user set-environment STEAM_GAMESCOPE_COLOR_MANAGED=1
systemctl --user set-environment STEAM_GAMESCOPE_VIRTUAL_WHITE=1

# Set input method modules for Qt/GTK that will show the Steam keyboard
systemctl --user set-environment QT_IM_MODULE=steam
systemctl --user set-environment GTK_IM_MODULE=Steam

# To play nice with the short term callback-based limiter for now
systemctl --user set-environment GAMESCOPE_LIMITER_FILE="$SESSION_RUNDIR/gamescope-limiter"

# Temporary crutch until dummy plane interactions / etc are figured out
systemctl --user set-environment GAMESCOPE_DISABLE_ASYNC_FLIPS=1

# Socket for communicating when Gamescope is ready
GAMESCOPE_STARTUP_SOCKET="$SESSION_RUNDIR/gamescope-startup.socket"
mkfifo -- "$GAMESCOPE_STARTUP_SOCKET"
systemctl --user set-environment GAMESCOPE_STARTUP_SOCKET="$GAMESCOPE_STARTUP_SOCKET"

# Pipe for Gamescope statistics
GAMESCOPE_STATS="$SESSION_RUNDIR/gamescope-stats.pipe"
mkfifo -- "$GAMESCOPE_STATS"
systemctl --user set-environment GAMESCOPE_STATS="$GAMESCOPE_STATS"
